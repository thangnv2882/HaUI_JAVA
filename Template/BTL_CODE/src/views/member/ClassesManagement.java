/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.member;

import dao.Clazz;
import dao.Course;
import dao.Semester;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import renderer.ComboBoxRenderer;
import renderer.ItemComboBox;
import services.ClassService;
import services.CourseService;
import services.SemesterService;

public class ClassesManagement extends javax.swing.JFrame {

    /**
     * Creates new form UsersManagement
     */
    public ClassesManagement() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbClass = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtClassName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        dcStartTime = new com.toedter.calendar.JDateChooser();
        dcEndTime = new com.toedter.calendar.JDateChooser();
        jLabel5 = new javax.swing.JLabel();
        cbCourse = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        cbSemester = new javax.swing.JComboBox<>();
        txtSearch = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÝ LỚP HỌC");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Quản lý lớp học");

        tbClass.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "ID", "Tên lớp học", "Ngày bắt đầu", "Ngày kết thúc", "Tên kỳ học", "Tên khóa học", "SemesterId", "CourseId"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbClass.getTableHeader().setResizingAllowed(false);
        tbClass.getTableHeader().setReorderingAllowed(false);
        tbClass.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbClassMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbClass);

        jLabel2.setText("ID:");

        txtId.setEditable(false);
        txtId.setEnabled(false);

        jLabel3.setText("Tên lớp học:");

        jLabel4.setText("Ngày bắt đầu:");

        jButton1.setText("Đóng");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnAdd.setText("Thêm mới");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Sửa");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel6.setText("Ngày kết thúc:");

        dcStartTime.setDateFormatString("dd-MM-yyyy");

        dcEndTime.setDateFormatString("dd-MM-yyyy");

        jLabel5.setText("Khóa học:");

        cbCourse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCourseItemStateChanged(evt);
            }
        });

        jLabel7.setText("Kỳ học:");

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });

        jLabel8.setText("Tìm kiếm theo tên:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel6))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(txtId)
                            .addComponent(txtClassName)
                            .addComponent(dcStartTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(dcEndTime, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(39, 39, 39)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cbSemester, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnAdd)
                        .addGap(18, 18, 18)
                        .addComponent(btnEdit)
                        .addGap(18, 18, 18)
                        .addComponent(btnDelete))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(18, 18, 18)
                        .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(58, 58, 58)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 625, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 58, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(470, 470, 470)
                .addComponent(jLabel1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(488, 488, 488))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtClassName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dcStartTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(dcEndTime, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(46, 46, 46)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnEdit)
                            .addComponent(btnDelete))
                        .addGap(37, 37, 37)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 448, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 43, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(30, 30, 30))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try {
            tbClass.removeColumn(tbClass.getColumnModel().getColumn(7));
            tbClass.removeColumn(tbClass.getColumnModel().getColumn(7));
        } catch (Exception e) {

        }

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");

        List<Clazz> clazzs = classService.getAllClasses();

        DefaultTableModel model = (DefaultTableModel) tbClass.getModel();
        for (int i = 0; i < clazzs.size(); i++) {
            Clazz clazz = clazzs.get(i);
            model.addRow(new Object[]{i + 1, clazz.getClassId(), clazz.getClassName(),
                simpleDateFormat.format(clazz.getStartTime()), simpleDateFormat.format(clazz.getEndTime()),
                clazz.getSemester().getSemesterName(), clazz.getSemester().getCourse().getCourseName(),
                clazz.getSemester().getSemesterId(), clazz.getSemester().getCourse().getCourseId()});
        }

        List<Course> courses = courseService.getAllCourses();
        List<Semester> semesters = semesterService.getAllSemesters();

        if (courses.size() != 0) {
            DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) cbCourse.getModel();
            defaultComboBoxModel.addElement(new ItemComboBox(0, ""));
            for (Course course : courses) {
                defaultComboBoxModel.addElement(new ItemComboBox(course.getCourseId(), course.getCourseName()));
            }

            cbCourse.setRenderer(new ComboBoxRenderer());
        }

        if (semesters.size() != 0) {
            DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) cbSemester.getModel();
            defaultComboBoxModel.addElement(new ItemComboBox(0, ""));
            for (Semester semester : semesters) {
                defaultComboBoxModel.addElement(new ItemComboBox(semester.getSemesterId(), semester.getSemesterName()));
            }

            cbSemester.setRenderer(new ComboBoxRenderer());
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        MemberScreenMain memberScreenMain = new MemberScreenMain();
        memberScreenMain.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tbClassMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbClassMouseClicked
        try {
            // TODO add your handling code here:
            DefaultTableModel tableModel = (DefaultTableModel) tbClass.getModel();
            Vector<Object> courseVector = (Vector<Object>) tableModel.getDataVector().elementAt(tbClass.getSelectedRow());

            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");

            Course course = new Course();
            course.setCourseId(Integer.parseInt(courseVector.get(8).toString()));
            course.setCourseName(courseVector.get(6).toString());

            Semester semester = new Semester();
            semester.setCourse(course);
            semester.setSemesterId(Integer.parseInt(courseVector.get(7).toString()));
            semester.setSemesterName(courseVector.get(5).toString());

            Clazz clazz = new Clazz();
            clazz.setSemester(semester);
            clazz.setClassId(Integer.parseInt(courseVector.get(1).toString()));
            clazz.setClassName(courseVector.get(2).toString());
            clazz.setStartTime(simpleDateFormat.parse(courseVector.get(3).toString()));
            clazz.setEndTime(simpleDateFormat.parse(courseVector.get(4).toString()));

            txtId.setText(clazz.getClassId().toString());
            txtClassName.setText(clazz.getClassName());
            dcStartTime.setDate(clazz.getStartTime());
            dcEndTime.setDate(clazz.getEndTime());

            DefaultComboBoxModel comboBoxModelCourse = (DefaultComboBoxModel) cbCourse.getModel();
            for (int i = 0; i < comboBoxModelCourse.getSize(); i++) {
                ItemComboBox itemComboBoxSelected = (ItemComboBox) comboBoxModelCourse.getElementAt(i);
                if (itemComboBoxSelected.getId() == course.getCourseId()) {
                    comboBoxModelCourse.setSelectedItem(itemComboBoxSelected);
                }
            }

            DefaultComboBoxModel comboBoxModelSemester = (DefaultComboBoxModel) cbSemester.getModel();
            for (int i = 0; i < comboBoxModelSemester.getSize(); i++) {
                ItemComboBox itemComboBoxSelected = (ItemComboBox) comboBoxModelSemester.getElementAt(i);
                if (itemComboBoxSelected.getId() == semester.getSemesterId()) {
                    comboBoxModelSemester.setSelectedItem(itemComboBoxSelected);
                }
            }
        } catch (NumberFormatException | ParseException ex) {
            Logger.getLogger(ClassesManagement.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_tbClassMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        this.dispose();
        AddClassFrame addClassFrame = new AddClassFrame();
        addClassFrame.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (txtId.getText().trim().compareTo("") == 0) {
            return;
        }

        int responseConfirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn xóa không?", "Xóa lớp học", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (responseConfirm == JOptionPane.YES_OPTION) {
            if (!classService.deleteClass(Integer.parseInt(txtId.getText()))) {
                JOptionPane.showConfirmDialog(null, "Xóa lớp học thất bại", "Xóa lớp học", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                return;
            }

            JOptionPane.showConfirmDialog(null, "Xóa lớp học thành công", "Xóa lớp học", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);

            DefaultTableModel model = (DefaultTableModel) tbClass.getModel();
            model.setRowCount(0);

            SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");

            List<Clazz> clazzs = classService.getAllClasses();

            for (int i = 0; i < clazzs.size(); i++) {
                Clazz currentClazz = clazzs.get(i);
                model.addRow(new Object[]{i + 1, currentClazz.getClassId(), currentClazz.getClassName(),
                    simpleDateFormat.format(currentClazz.getStartTime()), simpleDateFormat.format(currentClazz.getEndTime()),
                    currentClazz.getSemester().getSemesterName(), currentClazz.getSemester().getCourse().getCourseName(),
                    currentClazz.getSemester().getSemesterId(), currentClazz.getSemester().getCourse().getCourseId()});
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (txtId.getText().trim().compareTo("") == 0) {
            return;
        }

        if (txtClassName.getText().trim().compareTo("") == 0) {
            JOptionPane.showConfirmDialog(null, "Tên lớp học không được để trống", "Lỗi thêm mới", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }
        if (!dcStartTime.getDate().before(dcEndTime.getDate())) {
            JOptionPane.showConfirmDialog(null, "Ngày bắt đầu và ngày kết thúc không hợp lệ", "Lỗi thêm mới", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }

        ItemComboBox itemComboBoxCourse = (ItemComboBox) cbCourse.getSelectedItem();

        Course course = new Course(itemComboBoxCourse.getId(), itemComboBoxCourse.getContent(), null, null);

        ItemComboBox itemComboBoxSemester = (ItemComboBox) cbSemester.getSelectedItem();

        if (itemComboBoxSemester.getId() == null) {
            JOptionPane.showConfirmDialog(null, "Kỳ học không hợp lệ", "Lỗi thêm mới", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }

        Semester semester = new Semester(itemComboBoxSemester.getId(), itemComboBoxSemester.getContent(), null, null, course);

        Clazz clazz = new Clazz();
        clazz.setSemester(semester);
        clazz.setClassId(Integer.parseInt(txtId.getText()));
        clazz.setClassName(txtClassName.getText());
        clazz.setStartTime(dcStartTime.getDate());
        clazz.setEndTime(dcEndTime.getDate());

        if (!classService.updateClass(clazz)) {
            JOptionPane.showConfirmDialog(null, "Sửa lớp học thất bại", "Sửa khóa học", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showConfirmDialog(null, "Sửa lớp học thành công", "Sửa khóa học", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);

        DefaultTableModel model = (DefaultTableModel) tbClass.getModel();
        model.setRowCount(0);

        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");

        List<Clazz> clazzs = classService.getAllClasses();

        for (int i = 0; i < clazzs.size(); i++) {
            Clazz currentClazz = clazzs.get(i);
            model.addRow(new Object[]{i + 1, currentClazz.getClassId(), currentClazz.getClassName(),
                simpleDateFormat.format(currentClazz.getStartTime()), simpleDateFormat.format(currentClazz.getEndTime()),
                currentClazz.getSemester().getSemesterName(), currentClazz.getSemester().getCourse().getCourseName(),
                currentClazz.getSemester().getSemesterId(), currentClazz.getSemester().getCourse().getCourseId()});
        }

    }//GEN-LAST:event_btnEditActionPerformed

    private void cbCourseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCourseItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {

            if (((DefaultComboBoxModel) cbSemester.getModel()).getSize() == 0) {
                return;
            }

            ItemComboBox itemComboBox = (ItemComboBox) evt.getItem();

            List<Semester> semesters = semesterService.getSemestersByCourseId(itemComboBox.getId());

            if (semesters.size() != 0) {
                DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                for (Semester semester : semesters) {
                    defaultComboBoxModel.addElement(new ItemComboBox(semester.getSemesterId(), semester.getSemesterName()));
                }
                cbSemester.setModel(defaultComboBoxModel);
            } else {
                DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                defaultComboBoxModel.addElement(new ItemComboBox(null, "Không có"));
                cbSemester.setModel(defaultComboBoxModel);
            }
        }
    }//GEN-LAST:event_cbCourseItemStateChanged

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (txtSearch.getText().trim().compareTo("") == 0) {
                DefaultTableModel model = (DefaultTableModel) tbClass.getModel();
                model.setRowCount(0);

                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");

                List<Clazz> clazzs = classService.getAllClasses();

                for (int i = 0; i < clazzs.size(); i++) {
                    Clazz currentClazz = clazzs.get(i);
                    model.addRow(new Object[]{i + 1, currentClazz.getClassId(), currentClazz.getClassName(),
                        simpleDateFormat.format(currentClazz.getStartTime()), simpleDateFormat.format(currentClazz.getEndTime()),
                        currentClazz.getSemester().getSemesterName(), currentClazz.getSemester().getCourse().getCourseName(),
                        currentClazz.getSemester().getSemesterId(), currentClazz.getSemester().getCourse().getCourseId()});
                }
            } else {
                DefaultTableModel model = (DefaultTableModel) tbClass.getModel();
                model.setRowCount(0);

                SimpleDateFormat simpleDateFormat = new SimpleDateFormat("dd-MM-yyyy");

                List<Clazz> clazzs = classService.getClassesLikeClassName(txtSearch.getText());

                for (int i = 0; i < clazzs.size(); i++) {
                    Clazz currentClazz = clazzs.get(i);
                    model.addRow(new Object[]{i + 1, currentClazz.getClassId(), currentClazz.getClassName(),
                        simpleDateFormat.format(currentClazz.getStartTime()), simpleDateFormat.format(currentClazz.getEndTime()),
                        currentClazz.getSemester().getSemesterName(), currentClazz.getSemester().getCourse().getCourseName(),
                        currentClazz.getSemester().getSemesterId(), currentClazz.getSemester().getCourse().getCourseId()});
                }
            }
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClassesManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClassesManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClassesManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClassesManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClassesManagement().setVisible(true);
            }
        });
    }

    private ClassService classService = new ClassService();
    private CourseService courseService = new CourseService();
    private SemesterService semesterService = new SemesterService();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JComboBox<String> cbCourse;
    private javax.swing.JComboBox<String> cbSemester;
    private com.toedter.calendar.JDateChooser dcEndTime;
    private com.toedter.calendar.JDateChooser dcStartTime;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbClass;
    private javax.swing.JTextField txtClassName;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtSearch;
    // End of variables declaration//GEN-END:variables
}
