/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package views.admin;

import dao.Clazz;
import dao.Course;
import dao.Semester;
import dao.Student;
import java.awt.event.ItemEvent;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.Vector;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import renderer.ComboBoxRenderer;
import renderer.ItemComboBox;
import services.ClassService;
import services.CourseService;
import services.SemesterService;
import services.StudentService;

public class StudentsManagement extends javax.swing.JFrame {

    /**
     * Creates new form UsersManagement
     */
    public StudentsManagement() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbStudent = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtFullName = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        btnAdd = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        cbCourse = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        cbSemester = new javax.swing.JComboBox<>();
        cbClass = new javax.swing.JComboBox<>();
        jLabel8 = new javax.swing.JLabel();
        txtAddress = new javax.swing.JTextField();
        txtYearOfBirth = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        txtSearch = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("QUẢN LÝ HỒ SƠ HỌC SINH");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowOpened(java.awt.event.WindowEvent evt) {
                formWindowOpened(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setText("Quản lý hồ sơ học sinh");
        jLabel1.setToolTipText("");

        tbStudent.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "STT", "ID", "Họ tên", "Năm sinh", "Địa chỉ", "Tên lớp học", "Tên kỳ học", "Tên khóa học", "ClassId", "SemesterId", "CourseId"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbStudent.getTableHeader().setResizingAllowed(false);
        tbStudent.getTableHeader().setReorderingAllowed(false);
        tbStudent.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tbStudentMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tbStudent);

        jLabel2.setText("ID:");

        txtId.setEditable(false);
        txtId.setEnabled(false);

        jLabel3.setText("Họ tên:");

        jLabel4.setText("Năm sinh");

        jButton1.setText("Đóng");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        btnAdd.setText("Thêm mới");
        btnAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddActionPerformed(evt);
            }
        });

        btnEdit.setText("Sửa");
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        btnDelete.setText("Xóa");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        jLabel6.setText("Địa chỉ:");

        jLabel5.setText("Khóa học:");

        cbCourse.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbCourseItemStateChanged(evt);
            }
        });

        jLabel7.setText("Kỳ học:");

        cbSemester.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cbSemesterItemStateChanged(evt);
            }
        });

        jLabel8.setText("Lớp học:");

        jLabel9.setText("Tìm kiếm theo tên:");

        txtSearch.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                txtSearchKeyPressed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(67, 67, 67)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(5, 5, 5)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(jLabel2)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel4)))
                                    .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(txtId, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                                    .addComponent(txtFullName)
                                    .addComponent(txtAddress)
                                    .addComponent(txtYearOfBirth)))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel5)
                                    .addComponent(jLabel7)
                                    .addComponent(jLabel8))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cbSemester, 0, 172, Short.MAX_VALUE)
                                    .addComponent(cbCourse, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(cbClass, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap(28, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnAdd)
                                .addGap(18, 18, 18)
                                .addComponent(btnEdit)
                                .addGap(18, 18, 18)
                                .addComponent(btnDelete))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel9)
                                .addGap(18, 18, 18)
                                .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(61, 61, 61)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 790, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 38, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(511, 511, 511))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addGap(537, 537, 537))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(27, 27, 27)
                .addComponent(jLabel1)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 502, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(33, 33, 33)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtFullName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtYearOfBirth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtAddress, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(cbCourse, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(cbSemester, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(cbClass, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(51, 51, 51)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnAdd)
                            .addComponent(btnEdit)
                            .addComponent(btnDelete))
                        .addGap(49, 49, 49)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(txtSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 38, Short.MAX_VALUE)
                .addComponent(jButton1)
                .addGap(37, 37, 37))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowOpened(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowOpened
        // TODO add your handling code here:
        try {
            tbStudent.removeColumn(tbStudent.getColumnModel().getColumn(8));
            tbStudent.removeColumn(tbStudent.getColumnModel().getColumn(8));
            tbStudent.removeColumn(tbStudent.getColumnModel().getColumn(8));
        } catch (Exception e) {

        }

        List<Student> students = studentService.getAllStudents();

        DefaultTableModel model = (DefaultTableModel) tbStudent.getModel();
        for (int i = 0; i < students.size(); i++) {
            Student student = students.get(i);
            model.addRow(new Object[]{i + 1, student.getStudentId(), student.getFullName(),
                student.getYearOfBirth(), student.getAddress(), student.getClassName().getClassName(),
                student.getClassName().getSemester().getSemesterName(),
                student.getClassName().getSemester().getCourse().getCourseName(),
                student.getClassName().getClassId(), student.getClassName().getSemester().getSemesterId(),
                student.getClassName().getSemester().getCourse().getCourseId()});
        }

        List<Course> courses = courseService.getAllCourses();
        List<Semester> semesters = semesterService.getAllSemesters();
        List<Clazz> clazzs = classService.getAllClasses();

        if (courses.size() != 0) {
            DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) cbCourse.getModel();
            defaultComboBoxModel.addElement(new ItemComboBox(0, ""));
            for (Course course : courses) {
                defaultComboBoxModel.addElement(new ItemComboBox(course.getCourseId(), course.getCourseName()));
            }

            cbCourse.setRenderer(new ComboBoxRenderer());
        }

        if (semesters.size() != 0) {
            DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) cbSemester.getModel();
            defaultComboBoxModel.addElement(new ItemComboBox(0, ""));
            for (Semester semester : semesters) {
                defaultComboBoxModel.addElement(new ItemComboBox(semester.getSemesterId(), semester.getSemesterName()));
            }

            cbSemester.setRenderer(new ComboBoxRenderer());
        }

        if (clazzs.size() != 0) {
            DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) cbClass.getModel();
            defaultComboBoxModel.addElement(new ItemComboBox(0, ""));
            for (Clazz clazz : clazzs) {
                defaultComboBoxModel.addElement(new ItemComboBox(clazz.getClassId(), clazz.getClassName()));
            }

            cbClass.setRenderer(new ComboBoxRenderer());
        }
    }//GEN-LAST:event_formWindowOpened

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        this.dispose();
        AdminScreenMain adminScreenMain = new AdminScreenMain();
        adminScreenMain.setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void tbStudentMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tbStudentMouseClicked
        // TODO add your handling code here:
        DefaultTableModel tableModel = (DefaultTableModel) tbStudent.getModel();
        Vector<Object> courseVector = (Vector<Object>) tableModel.getDataVector().elementAt(tbStudent.getSelectedRow());

        Course course = new Course();
        course.setCourseId(Integer.parseInt(courseVector.get(10).toString()));
        course.setCourseName(courseVector.get(7).toString());

        Semester semester = new Semester();
        semester.setCourse(course);
        semester.setSemesterId(Integer.parseInt(courseVector.get(9).toString()));
        semester.setSemesterName(courseVector.get(6).toString());

        Clazz clazz = new Clazz();
        clazz.setSemester(semester);
        clazz.setClassId(Integer.parseInt(courseVector.get(8).toString()));
        clazz.setClassName(courseVector.get(5).toString());

        Student student = new Student();
        student.setClassName(clazz);
        student.setStudentId(Integer.parseInt(courseVector.get(1).toString()));
        student.setFullName(courseVector.get(2).toString());
        student.setYearOfBirth(Integer.parseInt(courseVector.get(3).toString()));
        student.setAddress(courseVector.get(4).toString());

        txtId.setText(student.getStudentId().toString());
        txtFullName.setText(student.getFullName());
        txtYearOfBirth.setText(student.getYearOfBirth().toString());
        txtAddress.setText(student.getAddress());

        DefaultComboBoxModel comboBoxModelCourse = (DefaultComboBoxModel) cbCourse.getModel();
        for (int i = 0; i < comboBoxModelCourse.getSize(); i++) {
            ItemComboBox itemComboBoxSelected = (ItemComboBox) comboBoxModelCourse.getElementAt(i);
            if (itemComboBoxSelected.getId() == course.getCourseId()) {
                comboBoxModelCourse.setSelectedItem(itemComboBoxSelected);
            }
        }

        DefaultComboBoxModel comboBoxModelSemester = (DefaultComboBoxModel) cbSemester.getModel();
        for (int i = 0; i < comboBoxModelSemester.getSize(); i++) {
            ItemComboBox itemComboBoxSelected = (ItemComboBox) comboBoxModelSemester.getElementAt(i);
            if (itemComboBoxSelected.getId() == semester.getSemesterId()) {
                comboBoxModelSemester.setSelectedItem(itemComboBoxSelected);
            }
        }

        DefaultComboBoxModel comboBoxModelClass = (DefaultComboBoxModel) cbClass.getModel();
        for (int i = 0; i < comboBoxModelClass.getSize(); i++) {
            ItemComboBox itemComboBoxSelected = (ItemComboBox) comboBoxModelClass.getElementAt(i);
            if (itemComboBoxSelected.getId() == clazz.getClassId()) {
                comboBoxModelClass.setSelectedItem(itemComboBoxSelected);
            }
        }
    }//GEN-LAST:event_tbStudentMouseClicked

    private void btnAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddActionPerformed
        // TODO add your handling code here:
        this.dispose();
        AddStudentFrame studentFrame = new AddStudentFrame();
        studentFrame.setVisible(true);
    }//GEN-LAST:event_btnAddActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        if (txtId.getText().trim().compareTo("") == 0) {
            return;
        }

        int responseConfirm = JOptionPane.showConfirmDialog(null, "Bạn có chắc chắn xóa không?", "Xóa học sinh", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if (responseConfirm == JOptionPane.YES_OPTION) {
            if (!studentService.deleteStudent(Integer.parseInt(txtId.getText()))) {
                JOptionPane.showConfirmDialog(null, "Xóa học sinh thất bại", "Xóa học sinh", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                return;
            }

            JOptionPane.showConfirmDialog(null, "Xóa học sinh thành công", "Xóa học sinh", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);

            DefaultTableModel model = (DefaultTableModel) tbStudent.getModel();
            model.setRowCount(0);

            List<Student> students = studentService.getAllStudents();

            for (int i = 0; i < students.size(); i++) {
                Student student = students.get(i);
                model.addRow(new Object[]{i + 1, student.getStudentId(), student.getFullName(),
                    student.getYearOfBirth(), student.getAddress(), student.getClassName().getClassName(),
                    student.getClassName().getSemester().getSemesterName(),
                    student.getClassName().getSemester().getCourse().getCourseName(),
                    student.getClassName().getClassId(), student.getClassName().getSemester().getSemesterId(),
                    student.getClassName().getSemester().getCourse().getCourseId()});
            }
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // TODO add your handling code here:
        if (txtId.getText().trim().compareTo("") == 0) {
            return;
        }

        if (txtFullName.getText().trim().compareTo("") == 0) {
            JOptionPane.showConfirmDialog(null, "Họ tên không được để trống", "Lỗi thêm mới", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }

        if (txtYearOfBirth.getText().trim().compareTo("") == 0) {
            JOptionPane.showConfirmDialog(null, "Năm sinh không được để trống", "Lỗi thêm mới", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        } else {
            String regexNumber = "^\\d+$";
            Pattern pattern = Pattern.compile(regexNumber);
            Matcher matcher = pattern.matcher(txtYearOfBirth.getText());
            if (!matcher.find()) {
                JOptionPane.showConfirmDialog(null, "Năm sinh không hợp lệ", "Lỗi thêm mới", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
                return;
            }
        }

        if (txtAddress.getText().trim().compareTo("") == 0) {
            JOptionPane.showConfirmDialog(null, "Địa chỉ không được để trống", "Lỗi thêm mới", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }

        ItemComboBox itemComboBoxClass = (ItemComboBox) cbClass.getSelectedItem();

        if (itemComboBoxClass.getId() == null) {
            JOptionPane.showConfirmDialog(null, "Lớp học không được để trống", "Lỗi thêm mới", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }

        Clazz clazz = new Clazz(itemComboBoxClass.getId(), itemComboBoxClass.getContent(), null, null, null);

        Student studentUpdate = new Student(Integer.parseInt(txtId.getText()), txtFullName.getText(), Integer.parseInt(txtYearOfBirth.getText()), txtAddress.getText(), clazz);

        if (!studentService.updateStudent(studentUpdate)) {
            JOptionPane.showConfirmDialog(null, "Sửa thông tin học sinh thất bại", "Sửa khóa học", JOptionPane.DEFAULT_OPTION, JOptionPane.ERROR_MESSAGE);
            return;
        }
        JOptionPane.showConfirmDialog(null, "Sửa thông tin học sinh thành công", "Sửa khóa học", JOptionPane.DEFAULT_OPTION, JOptionPane.INFORMATION_MESSAGE);

        DefaultTableModel model = (DefaultTableModel) tbStudent.getModel();
        model.setRowCount(0);

        List<Student> students = studentService.getAllStudents();

        for (int i = 0; i < students.size(); i++) {
            Student student = students.get(i);
            model.addRow(new Object[]{i + 1, student.getStudentId(), student.getFullName(),
                student.getYearOfBirth(), student.getAddress(), student.getClassName().getClassName(),
                student.getClassName().getSemester().getSemesterName(),
                student.getClassName().getSemester().getCourse().getCourseName(),
                student.getClassName().getClassId(), student.getClassName().getSemester().getSemesterId(),
                student.getClassName().getSemester().getCourse().getCourseId()});
        }

    }//GEN-LAST:event_btnEditActionPerformed

    private void cbCourseItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbCourseItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {

            if (((DefaultComboBoxModel) cbCourse.getModel()).getSize() == 0) {
                return;
            }

            ItemComboBox itemComboBox = (ItemComboBox) evt.getItem();

            List<Semester> semesters = semesterService.getSemestersByCourseId(itemComboBox.getId());

            if (semesters.size() != 0) {
                DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                for (Semester semester : semesters) {
                    defaultComboBoxModel.addElement(new ItemComboBox(semester.getSemesterId(), semester.getSemesterName()));
                }
                cbSemester.setModel(defaultComboBoxModel);

                DefaultComboBoxModel defaultComboBoxModelSemester = (DefaultComboBoxModel) cbSemester.getModel();
                ItemComboBox itemComboBoxSemester = (ItemComboBox) defaultComboBoxModelSemester.getSelectedItem();

                List<Clazz> clazzs = classService.getClassesBySemesterId(itemComboBoxSemester.getId());

                if (clazzs.size() != 0) {
                    DefaultComboBoxModel defaultComboBoxModelClass = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                    for (Clazz clazz : clazzs) {
                        defaultComboBoxModelClass.addElement(new ItemComboBox(clazz.getClassId(), clazz.getClassName()));
                    }
                    cbClass.setModel(defaultComboBoxModelClass);
                } else {
                    DefaultComboBoxModel defaultComboBoxModelClass = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                    defaultComboBoxModelClass.addElement(new ItemComboBox(null, "Không có"));
                    cbClass.setModel(defaultComboBoxModelClass);
                }

            } else {
                DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                defaultComboBoxModel.addElement(new ItemComboBox(null, "Không có"));
                cbSemester.setModel(defaultComboBoxModel);
                DefaultComboBoxModel defaultComboBoxModelClass = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                defaultComboBoxModelClass.addElement(new ItemComboBox(null, "Không có"));
                cbClass.setModel(defaultComboBoxModelClass);
            }
        }
    }//GEN-LAST:event_cbCourseItemStateChanged

    private void cbSemesterItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cbSemesterItemStateChanged
        // TODO add your handling code here:
        if (evt.getStateChange() == ItemEvent.SELECTED) {
            if (((DefaultComboBoxModel) cbSemester.getModel()).getSize() == 0) {
                return;
            }

            ItemComboBox itemComboBox = (ItemComboBox) evt.getItem();

            if (itemComboBox.getId() == null) {
                DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                defaultComboBoxModel.addElement(new ItemComboBox(null, "Không có"));
                cbClass.setModel(defaultComboBoxModel);
                return;
            }

            List<Clazz> clazzs = classService.getClassesBySemesterId(itemComboBox.getId());

            if (clazzs.size() != 0) {
                DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                for (Clazz clazz : clazzs) {
                    defaultComboBoxModel.addElement(new ItemComboBox(clazz.getClassId(), clazz.getClassName()));
                }
                cbClass.setModel(defaultComboBoxModel);
            } else {
                DefaultComboBoxModel defaultComboBoxModel = (DefaultComboBoxModel) new JComboBox<ItemComboBox>().getModel();
                defaultComboBoxModel.addElement(new ItemComboBox(null, "Không có"));
                cbClass.setModel(defaultComboBoxModel);
            }
        }
    }//GEN-LAST:event_cbSemesterItemStateChanged

    private void txtSearchKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtSearchKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            if (txtSearch.getText().trim().compareTo("") == 0) {
                DefaultTableModel model = (DefaultTableModel) tbStudent.getModel();
                model.setRowCount(0);

                List<Student> students = studentService.getAllStudents();

                for (int i = 0; i < students.size(); i++) {
                    Student student = students.get(i);
                    model.addRow(new Object[]{i + 1, student.getStudentId(), student.getFullName(),
                        student.getYearOfBirth(), student.getAddress(), student.getClassName().getClassName(),
                        student.getClassName().getSemester().getSemesterName(),
                        student.getClassName().getSemester().getCourse().getCourseName(),
                        student.getClassName().getClassId(), student.getClassName().getSemester().getSemesterId(),
                        student.getClassName().getSemester().getCourse().getCourseId()});
                }
            } else {
                DefaultTableModel model = (DefaultTableModel) tbStudent.getModel();
                model.setRowCount(0);

                List<Student> students = studentService.getStudentsLikeStudentName(txtSearch.getText());

                for (int i = 0; i < students.size(); i++) {
                    Student student = students.get(i);
                    model.addRow(new Object[]{i + 1, student.getStudentId(), student.getFullName(),
                        student.getYearOfBirth(), student.getAddress(), student.getClassName().getClassName(),
                        student.getClassName().getSemester().getSemesterName(),
                        student.getClassName().getSemester().getCourse().getCourseName(),
                        student.getClassName().getClassId(), student.getClassName().getSemester().getSemesterId(),
                        student.getClassName().getSemester().getCourse().getCourseId()});
                }
            }
        }
    }//GEN-LAST:event_txtSearchKeyPressed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(StudentsManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(StudentsManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(StudentsManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(StudentsManagement.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new StudentsManagement().setVisible(true);
            }
        });
    }

    private StudentService studentService = new StudentService();
    private ClassService classService = new ClassService();
    private CourseService courseService = new CourseService();
    private SemesterService semesterService = new SemesterService();
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAdd;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnEdit;
    private javax.swing.JComboBox<String> cbClass;
    private javax.swing.JComboBox<String> cbCourse;
    private javax.swing.JComboBox<String> cbSemester;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tbStudent;
    private javax.swing.JTextField txtAddress;
    private javax.swing.JTextField txtFullName;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtSearch;
    private javax.swing.JTextField txtYearOfBirth;
    // End of variables declaration//GEN-END:variables
}
